<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.enjoytrip.board.model.mapper.BoardMapper">

    <resultMap id="boardWriting" type="boardWritingDto">
        <result column="title" property="title"></result>
        <result column="content" property="content"></result>
        <result column="member_id" property="memberId"></result>
    </resultMap>

    <resultMap id="boardReading" type="boardReadDto">
        <result column="title" property="title"></result>
        <result column="content" property="content"></result>
        <result column="create_time" property="createTime"></result>
        <result column="nickname" property="nickname"></result>
    </resultMap>
    
    <resultMap id="boardList" type="boardListDto">
        <result column="board_id" property="boardId"></result>
        <result column="title" property="title"></result>
        <result column="member_id" property="memberId"></result>
        <result column="create_time" property="createTime"></result>
    </resultMap>

    <resultMap id="boardUpdate" type="boardUpdateDto">
        <result column="title" property="title"></result>
        <result column="content" property="content"></result>
        <result column="trip_id" property="tripId"></result>
    </resultMap>

    <insert id="writeBoard" parameterType="boardWritingDto" useGeneratedKeys="true">
        INSERT INTO Boards (title, content, member_id)
        VALUES (#{title}, #{content}, #{memberId})
    </insert>

    <select id="readBoard" parameterType="int" resultMap="boardReading">
        select b.title, b.content, b.create_time, m.nickname, b.is_deleted as isDeleted
        from boards b
        join members m on b.member_Id = m.member_id
        where b.board_id = #{boardId}
        and b.is_deleted = false
    </select>

    <update id="updateBoard" parameterType="map">
        update boards
        set title   = #{boardUpdateDto.title},
            content = #{boardUpdateDto.content}
        where board_id = #{boardId}
        and b.is_deleted = false
    </update>

    <delete id="deleteBoard" parameterType="int">
        update boards
        set is_deleted = true
        where board_id = #{boardId}
    </delete>

    <delete id="deleteAllCommentInBoard" parameterType="int">
        delete
        from comment
        where board_id = #{boardId}
    </delete>
    
    <select id="getBoardList" resultMap="boardList">
        select board_id, title, member_id, create_time
        from board
        order by board_id desc
        limit #{pageSize} offset #{offset};
    </select>
    
    <select id="searchBoard" resultMap="boardList">
        select board_id, title, member_id, create_time
        from board
        <where>
            <if test="searchType == 'title'">
                and title like concat('%', #{keyword}, '%')
            </if>
            <if test="searchType == 'memberId'">
                and member_id like concat('%', #{keyword}, '%')
            </if>
            <if test="searchType == 'content'">
                and content like concat('%', #{keyword}, '%')
            </if>
        </where>
        order by board_id desc
        limit #{pageSize} offset #{offset};
    </select>

    <select id="countSearchResults" parameterType="map" resultType="int">
    select count(*)
    from board
    <where>
        <if test="searchType == 'title'">
            and title like concat('%', #{keyword}, '%')
        </if>
        <if test="searchType == 'memberId'">
            and member_id like concat('%', #{keyword}, '%')
        </if>
        <if test="searchType == 'content'">
            and content like concat('%', #{keyword}, '%')
        </if>
    </where>
    </select>

    <select id="countBoard" resultType="int">
        SELECT COUNT(*)
        FROM board
    </select>
</mapper>
